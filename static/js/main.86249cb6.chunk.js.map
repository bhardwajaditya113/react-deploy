{"version":3,"sources":["App.js","serviceWorker.js","reportWebVitals.js","index.js"],"names":["Component","PATH_BASE","PATH_SEARCH","PARAM_SEARCH","PARAM_PAGE","PARAM_HPP","midColumn","width","smallColumn","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","App","props","state","results","searchKey","searchTerm","error","isLoading","needsToSearchTopStories","bind","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","onDismiss","this","result","hits","page","setState","prevState","oldHits","updatedHits","updateSearchTopStoriesState","axios","then","data","catch","event","target","value","preventDefault","id","filter","item","objectID","className","onChange","ButtonWithLoading","onClick","Search","onSubmit","children","type","Table","sortKey","isSortReverse","onSort","sortedList","reverseSortedList","style","activeSortKey","map","href","url","title","author","num_comments","points","Sort","sortClass","classNames","Button","Loading","rest","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.86249cb6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { sortBy } from 'lodash';\nimport classNames from 'classnames';\nimport './App.css';\nimport axios from 'axios';\n\n//Constants\nconst DEFAULT_QUERY = 'redux';\nconst DEFAULT_PAGE = 0;\nconst DEFAULT_HPP = '100';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1/';\nconst PATH_SEARCH = 'search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nconst largeColumn = {\n    width: '40%',\n  };\n  \n  const midColumn = {\n    width: '30%',\n  };\n  \n  const smallColumn = {\n    width: '10%',\n  };\n\n\nconst SORTS = {\n    NONE: list => list,\n    TITLE: list => sortBy(list, 'title'),\n    AUTHOR: list => sortBy(list, 'author'),\n    COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n    POINTS: list => sortBy(list, 'points').reverse(),\n}\n\n\nconst updateSearchTopStoriesState = (hits, page) => (prevState) => {\n    const { searchKey, results } = prevState;\n\n    const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\n\n    const updatedHits = [\n        ...oldHits,\n        ...hits,\n    ];\n\n    return{\n        results: {\n            ...results,\n            [searchKey]: { hits: updatedHits, page }\n        },\n        isLoading: false\n    };\n};\n\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            results: null,\n            searchKey: '',\n            searchTerm: DEFAULT_QUERY,\n            error: null,\n            isLoading: false,\n        };\n\n\n        this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n        this.setSearchTopStories = this.setSearchTopStories.bind(this);\n        this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n        this.onSearchChange = this.onSearchChange.bind(this);\n        this.onSearchSubmit = this.onSearchSubmit.bind(this);\n        this.onDismiss = this.onDismiss.bind(this);\n    }\n\n    needsToSearchTopStories(searchTerm){\n        return !this.state.results[searchTerm];\n    }\n\n\n    setSearchTopStories(result){\n        const { hits, page } = result;\n        this.setState(updateSearchTopStoriesState(hits, page));\n    }\n\n    fetchSearchTopStories(searchTerm, page = 0){\n        this.setState({ isLoading: true });\n\n\n        axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n        .then(result => this.setSearchTopStories(result.data))\n        .catch(error => this.setState({ error }));\n    }\n\n    componentDidMount(){\n        const { searchTerm } = this.state;\n        this.setState({ searchKey: searchTerm });\n        this.fetchSearchTopStories(searchTerm);\n    }\n\n\n    onSearchChange(event){\n        this.setState({ searchTerm: event.target.value });\n    }\n\n    onSearchSubmit(event){\n        const { searchTerm } = this.state;\n        this.setState({ searchKey: searchTerm });\n\n\n        if(this.needsToSearchTopStories(searchTerm)){\n            this.fetchSearchTopStories(searchTerm);\n        }\n\n        event.preventDefault();\n    }\n\n\n\n    \n    onDismiss(id){\n        const { searchKey, results } = this.state;\n        const { hits, page } = results[searchKey];\n\n\n        const isNotId = item => item.objectID !== id;\n        const updatedHits = hits.filter(isNotId);\n\n        this.setState({\n            results: {\n                ...results,\n                [searchKey]: { hits: updatedHits, page }\n            }\n        });\n    }\n\n        render(){\n            const {\n                searchTerm,\n                results,\n                searchKey,\n                error,\n                isLoading\n            } = this.state;\n\n            const page = (results && results[searchKey] && results[searchKey].page) || 0;\n            const list = (results && results[searchKey] && results[searchKey].hits) || []; \n\n\n            return(\n                <div className=\"page\">\n                    <div className=\"interactions\">\n                        <Search \n                            value={searchTerm}\n                            onChange={this.onSearchChange}\n                            onSearchSubmit={this.onSearchSubmit}\n                        >\n                            Search\n                        </Search>\n                    </div>\n                    {\n                        error\n                        ? <div className=\"interactions\">\n                            <p>Something went wrong</p>\n                        </div>\n                    :\n                    <Table \n                        list={list}\n                        onDismiss={this.onDismiss} \n                    />\n                    }\n                        <div className=\"interactions\">\n                        <ButtonWithLoading\n                            isLoading={isLoading}\n                            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}>\n                                More\n                            </ButtonWithLoading>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    const Search = ({\n        value,\n        onChange,\n        onSubmit,\n        children\n    }) => \n    <form onSubmit={onSubmit}>\n        <input \n            type=\"text\"\n            value={value}\n            onChange={onChange}\n        />\n        <button type=\"submit\">\n            {children}\n        </button>\n    </form>\n\n    class Table extends Component{\n        constructor(props){\n            super(props);\n\n            this.state = {\n                sortKey: 'NONE',\n                isSortReverse: false\n            }\n\n            this.onSort = this.onSort.bind(this);\n        }\n\n        onSort(sortKey){\n            const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n            this.setState({ sortKey, isSortReverse });\n        }\n\n        render(){\n            const {\n                list, \n                onDismiss\n            } = this.props;\n\n            const {\n                sortKey,\n                isSortReverse,\n            } = this.state;\n            \n            const sortedList = SORTS[sortKey](list);\n            const reverseSortedList = isSortReverse ? sortedList.reverse(): sortedList;\n\n            return(\n                <div className=\"table\">\n                    <div className=\"table-header\">\n                        <span style={{ width: '40%' }}>\n                            <Sort   \n                                sortKey={'TITLE'}\n                                onSort={this.onSort}\n                                activeSortKey={sortKey}\n                            >\n                            Title\n                        </Sort>\n                        </span>\n                        <span style={{ width: '30%' }}>\n                            <Sort   \n                                sortKey={'AUTHOR'}\n                                onSort={this.onSort}\n                                activeSortKey={sortKey}\n                            >\n                            Author\n                        </Sort>\n                        </span>\n                        <span style={{ width: '10%' }}>\n                            <Sort   \n                                sortKey={'COMMENTS'}\n                                onSort={this.onSort}\n                                activeSortKey={sortKey}\n                            >\n                            Comments\n                        </Sort>\n                        </span>\n                        <span style={{ width: '10%' }}>\n                            <Sort   \n                                sortKey={'POINTS'}\n                                onSort={this.onSort}\n                                activeSortKey={sortKey}\n                            >\n                            Points\n                        </Sort>\n                        </span>\n                        <span style={{ width: '10%' }}>\n                           Archive\n                        </span>\n                    </div>\n                    {reverseSortedList.map(item => \n                        <div key={item.objectID} className=\"table-row\">\n                            <span style={{ width: '40%' }}>\n                                <a href={item.url}>{item.title}</a>\n                            </span>    \n                            <span style={{ midColumn }}>\n                                {item.author}\n                            </span>    \n                            <span style={{ smallColumn }}>\n                                {item.num_comments}\n                            </span>    \n                            <span style={{ smallColumn }}>\n                                {item.points}\n                            </span>  \n                            <span style={{ smallColumn }}>\n                                <Button\n                                    onClick={() => onDismiss(item.objectID)}\n                                    className=\"button-inline\"\n                                >\n                                    Dismiss\n                                </Button>\n                            </span>    \n                        </div>  \n                    )}\n                </div>\n            );\n        }\n    }\n\n    const Sort = ({\n        sortKey,\n        activeSortKey,\n        onSort,\n        children\n    }) => {\n        const sortClass = classNames(\n            'button-inline',\n            { 'button-active': sortKey === activeSortKey }\n        );\n\n        return(\n            <Button\n                onClick={() => onSort(sortKey)}\n                className={sortClass}\n            >\n                {children}\n            </Button>\n        );\n    }\n\n    const Button = ({ onClick, className='', children }) =>\n        <button \n            onClick={onClick}\n            className={className}\n            type=\"button\"\n        >\n            {children}\n        </button>\n\n\n    const Loading = () => \n        <div>Loading...</div>\n\n\n    const withLoading = (Component) => ({ isLoading, ...rest }) => \n        isLoading ? <Loading /> : <Component {...rest} />\n\n    const ButtonWithLoading = withLoading(Button);\n\n    export default App;\n\n    export {\n        Button,\n        Search,\n        Table,\n    };\n\n    \n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9][01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config){\n    if(process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator){\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if(publicUrl.origin !== window.location.origin){\n            return;\n        }\n\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n            \n            \n            if(isLocalhost){\n                checkValidServiceWorker(swUrl, config);\n            \n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' + 'worker'\n                    );\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n\n  function checkValidServiceWorker(swUrl, config){\n      fetch(swUrl)\n      .then(response => {\n          const contentType = response.headers.get('content-type');\n          if(\n              response.status === 404 || \n              (contentType !== null && contentType.indexOf('javascript') === -1)\n          ){\n              navigator.serviceWorker.ready.then(registration => {\n                  registration.unregister().then(() => {\n                      window.location.reload();\n                  });\n              });\n          } else {\n              registerValidSW(swUrl, config);\n          }\n      })\n      .catch(() => {\n          console.log(\n              'No internet connection found, App is running in the offline mode.'\n          );\n      });\n  }\n\n  export function unregister(registration){\n      if('serviceWorker' in navigator){\n          navigator.serviceWorker.ready.then(() => {\n              registration.unregister();\n          });\n      }\n  }\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nif(module.hot){\n  module.hot.accept();\n}\n\nserviceWorker.register();\n"],"sourceRoot":""}